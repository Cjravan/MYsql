use prac;
select * from data;
describe data;


# Write a SQL query to select all columns from the table.
select * from data;
-- How would you retrieve distinct StockCodes from the table?-- 
select count(distinct(stockcode)) from data;
# Retrieve all invoices where the Quantity is greater than 100.
select Quantity, InvoiceNo from data where quantity > 100;
# Show all invoices made by a specific CustomerID.
select invoiceNo, Country from data where customerID = '17850';
# Display the total number of rows in the table.
select count(*) from data;
# Get the earliest InvoiceDate from the table.
select invoicedate from data order by invoicedate desc limit 1;
select min(invoicedate) from data;
# List all invoices where the UnitPrice is less than 1.00.
select invoiceno, country from data where unitprice< 1.00;
# Count the number of unique Description entries in the table.
select count(distinct(description)) from data;
# Retrieve all invoices from a specific Country.
select invoiceno, country from data where country = 'France';
# Display the average UnitPrice across all invoices.
select avg(unitprice) as avg_unit_price from data;
# Calculate the total Quantity sold for each StockCode.
select count(quantity), stockcode from data group by stockcode;
# Find the top 5 countries with the highest number of invoices.
select country, count(*) as invoice_count from data group by country order by invoice_count desc limit 5;
# Show the CustomerID and their corresponding total UnitPrice amount.
select customerID, sum(unitPrice) as total_price from data group by customerID;
# Calculate the total revenue generated by each CustomerID.
select customerID, sum(quantity * UnitPrice) as total_revenue from data group by customerID;
# List all invoices where the Description contains the word 'discount'.
select * from data where Description like '%discount%';
# Display the average Quantity sold per invoice.
select InvoiceNo, avg(quantity) as avg_quantity from data group by InvoiceNo;
 # Find the CustomerID with the highest total Quantity.
 select customerID, sum(quantity) as total_quantity from data group by customerID order by total_quantity desc limit 1;
 # Show the StockCodes that have been sold more than 500 times.
 select stockcode, count(*) as sold from data group by stockcode having sold > 500;
 # Calculate the total revenue generated per Country.
 select country, sum(quantity * UnitPrice) as total_revenue from data group by country;
 # Display the most common Description in the table.
 select mode(description) from data;
 select description, count(*) as common from data group by description order by common desc limit 1;
 # Identify any potential duplicates in the table based on InvoiceNo, StockCode, and InvoiceDate.
 select InvoiceNo, Stockcode, invoicedate, count(*) as duplicates from data
 group by invoiceno, stockcode, invoicedate having count(*) > 1;
 # Find the CustomerID who has made the most recent purchase.
 select customerid, invoicedate from data group by customerID order by invoicedate desc limit 5;
 # Calculate the total revenue generated per month.
 select invoicedate, sum(quantity * unitprice) as total_revenue from data group by invoicedate;
 select date_format(invoicedate, '%y-%m') as invoice_month, sum(quantity * unitprice) as total_revenue
 from data group by invoice_month;
# Determine the correlation between Quantity and UnitPrice.
SELECT
    (
        (COUNT(*) * SUM(Quantity * UnitPrice)) - (SUM(Quantity) * SUM(UnitPrice))
    ) / (
        SQRT(
            (COUNT(*) * SUM(Quantity * Quantity)) - (SUM(Quantity) * SUM(Quantity))
        ) * SQRT(
            (COUNT(*) * SUM(UnitPrice * UnitPrice)) - (SUM(UnitPrice) * SUM(UnitPrice))
        )
    ) AS Correlation
FROM
    data;
# Find the CustomerID with the highest average UnitPrice per invoice.
select customerID, avg(unitprice) as avg_unit from data group by unitprice order by avg_unit desc limit 1;
# Show the top 10 most expensive invoices (based on total UnitPrice).
select invoiceNo, sum(unitprice) as total_unit_price from data 
group by invoiceno order by total_unit_price desc limit 10;
# Identify any outliers in the Quantity column using standard deviation.
# Calculate the median UnitPrice across all invoices.
SELECT
    AVG(median) AS median_unit_price
FROM (
    SELECT
        UnitPrice AS median
    FROM (
        SELECT
            @rownum:=@rownum+1 as `row_number`,
            d.UnitPrice
        FROM
            (SELECT @rownum:=0) r,
            data d
        ORDER BY
            d.UnitPrice
    ) ranked
    WHERE
        ranked.row_number IN (
            FLOOR((@rownum+1)/2),
            FLOOR((@rownum+2)/2)
        )
) AS medians;
# Find the earliest and latest InvoiceDate for each CustomerID.
select invoicedate, customerID from data group by customerID order by invoicedate desc;
select CustomerID, MIN(InvoiceDate) AS Earliest_InvoiceDate, MAX(InvoiceDate) AS Latest_InvoiceDate
from data group by CustomerID;
# Calculate the average time between consecutive invoices for each CustomerID.
select customerID, avg(invoicedate) as avg_invoice from data group by customerID ;

select *from data;

